import axios from 'axios';
import {parse} from 'node-html-parser';
import {Book} from './Book';
import * as database from '../database';

/*
    List of novels by release date: https://starwars.fandom.com/wiki/List_of_novels_by_release_date
  */
const scrapeListOfBooks = async () => {
  const {data} = await axios.get<string>(
    'https://starwars.fandom.com/wiki/List_of_novels_by_release_date',
  );
  await database.writeFile('pages/listOfBooks.html', data);
};

const scrapeBooksFromListOfBooks = async () => {
  const html = database.readFileSync('pages/listOfBooks.html');
  const root = parse(html);
  const urls: Array<string> = [];
  // For some reason, sometimes a list item has the a tag first then the italics
  // tag. Other times it's the other way around.
  root.querySelectorAll('.mw-parser-output ul li a i').forEach(el => {
    const url = el.parentNode.getAttribute('href');
    url && urls.push(url);
  });
  root.querySelectorAll('.mw-parser-output ul li i a').forEach(el => {
    const url = el.getAttribute('href');
    url && urls.push(url);
  });
  for (const url of urls) {
    await Book.scrapeBook(url);
  }
};

const scrapeImages = async (soft = true) => {
  const books = await Book.getAllBooks();
  for (const book of books) {
    await book.scrapeImage(soft);
  }
};

const createBooksInReactNative = async () => {
  let contents = `/*
  Autogenerated file.

  Images in react-native either need to be urls or from local.
  I want to do local, but in order to do it I need to require the
  image without dynamic strings. So I am autogenerating this file
  which has all the requires written out.
*/
export const data = [
`;
  const books = await Book.getAllBooks();
  for (const book of books) {
    if (book.timelineStart == null) {
      // for now, don't want any books that don't have timeline
      continue;
    }
    // TODO: duplicate image
    contents += `  {
    title: '${book.title}',
    timelineStart: ${book.timelineStart},
    timelineEnd: ${book.timelineEnd},
    image: require('./images/${book.imageFileName}'),
  },
`;
    const imageExists = await database.doesPathExist(
      `images/${book.imageFileName}`,
    );
    if (imageExists) {
      await database.copyFile(
        `images/${book.imageFileName}`,
        `./src/data/images/${book.imageFileName}`,
      );
    } else {
      await database.copyFile(
        'NoBookImageFound.jpeg',
        `./src/data/images/${book.imageFileName}`,
      );
    }
  }
  contents += '].sort((a, b) => a.timelineStart - b.timelineStart);\n';
  await database.writeFile('../../src/data/index.ts', contents);
};

export const Books = {
  scrapeListOfBooks,
  scrapeBooksFromListOfBooks,
  scrapeImages,
  createBooksInReactNative,
};
